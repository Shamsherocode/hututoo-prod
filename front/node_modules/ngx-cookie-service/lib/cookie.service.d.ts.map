{"version":3,"file":"cookie.service.d.ts","sources":["cookie.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nexport declare class CookieService {\n    private document;\n    private platformId;\n    private readonly documentIsAccessible;\n    constructor(document: any, platformId: InjectionToken<object>);\n    /**\n     * Get cookie Regular Expression\n     *\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    private static getCookieRegExp;\n    private static safeDecodeURIComponent;\n    /**\n     * Return `true` if {@link Document} is accessible, otherwise return `false`\n     *\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    check(name: string): boolean;\n    /**\n     * Get cookies by name\n     *\n     * @param name Cookie name\n     * @returns property value\n     */\n    get(name: string): string;\n    /**\n     * Get all cookies in JSON format\n     *\n     * @returns all the cookies in json\n     */\n    getAll(): {\n        [key: string]: string;\n    };\n    /**\n     * Set cookie based on provided information\n     *\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param expires  Number of days until the cookies expires or an actual `Date`\n     * @param path     Cookie path\n     * @param domain   Cookie domain\n     * @param secure   Secure flag\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n     */\n    set(name: string, value: string, expires?: number | Date, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\n    /**\n     * Set cookie based on provided information\n     *\n     * Cookie's parameters:\n     * <pre>\n     * expires  Number of days until the cookies expires or an actual `Date`\n     * path     Cookie path\n     * domain   Cookie domain\n     * secure   Secure flag\n     * sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n     * </pre>\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param options  Body with cookie's params\n     */\n    set(name: string, value: string, options?: {\n        expires?: number | Date;\n        path?: string;\n        domain?: string;\n        secure?: boolean;\n        sameSite?: 'Lax' | 'None' | 'Strict';\n    }): void;\n    /**\n     * Delete cookie by name\n     *\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Cookie secure flag\n     * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n     */\n    delete(name: string, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\n    /**\n     * Delete all cookies\n     *\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Is the Cookie secure\n     * @param sameSite Is the cookie same site\n     */\n    deleteAll(path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\n}\n"]}